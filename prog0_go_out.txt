XXXPARSER exp
type exp interface {
  isa_exp()
}


type Num struct {
   a0 int
}
func _Num(a0 int ) *Num {
   o := Num{}
   o.a0 = a0
   return &o
}
func (o *Num) isa_exp() {}
func (o *Num) String() string {
    s := fmt.Sprintf("Num(%v)",o.a0)
    return s
}
type Sum struct {
   a0 exp
   a1 exp
}
func _Sum(a0 exp,a1 exp ) *Sum {
   o := Sum{}
   o.a0 = a0
   o.a1 = a1
   return &o
}
func (o *Sum) isa_exp() {}
func (o *Sum) String() string {
    s := fmt.Sprintf("Sum(%v,%v)",o.a0,o.a1)
    return s
}


if 1 == 1:
   d1 = Sum(Sum(Num(3), Num(5)), Sum(Num(8), Num(9)))


#  Sum(Sum(el,Num(y)),Sum(ex,k))
   if isinstance(d1, Sum):
      t0 = d1.exp
      t1 = d1.exp
      if isinstance(t0, Sum):
         el = t0.exp
         t2 = t0.exp
         if isinstance(t2, Num):
            y = t2.int
            if isinstance(t1, Sum):
               ex = t1.exp
               k = t1.exp
               print(el)
               print(y),
               print(ex)
               print(k)
               
#  Sum(el,Num(y))
   if isinstance(d1, Sum):
      el = d1.exp
      t3 = d1.exp
      if isinstance(t3, Num):
         y = t3.int
         print("el=",el)
         print("y =",y)
         
else:
   print('mah')
